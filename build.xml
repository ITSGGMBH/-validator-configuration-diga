<?xml version="1.0" encoding="UTF-8"?>
<!--
   - Copyright © 2020 - 2021 BITMARCK Service GmbH
   - Copyright © 2021 - 2023 ITSG GmbH
   -
   - Licensed under the Apache License, Version 2.0 (the "License");
   - you may not use this file except in compliance with the License.
   - You may obtain a copy of the License at
   -
   -     http://www.apache.org/licenses/LICENSE-2.0
   -
   - Unless required by applicable law or agreed to in writing, software
   - distributed under the License is distributed on an "AS IS" BASIS,
   - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   - See the License for the specific language governing permissions and
   - limitations under the License.
   -->
<project default="test">

    <description>Builds the KOSIT Validator configuration for DiGA invoices.</description>

    <property name="build.dir" value="build"/>
    <property name="config.dir" value="${build.dir}/config"/>
    <property name="test.src.dir" value="src/test/resources"/>
    <property name="test.assertions.filename" value="assertions.xml"/>
    <property name="test.integration.dir" value="${build.dir}/test"/>
    <property name="test.results.subdir" value="report"/>
    <property name="lib.dir" value="lib"/>
    <property name="saxon.version" value="10.6"/>
    <property name="schxslt.version" value="1.8.5"/>
    <property name="validator.version" value="1.5.0"/>
    <property name="validator.jar" value="validationtool-${validator.version}-standalone.jar"/>
    <property name="xrechnung.download.url" value="https://github.com/itplr-kosit/validator-configuration-xrechnung/releases/download"/>

    <target name="test" depends="build">
      <copy todir="${test.integration.dir}" verbose="false" includeEmptyDirs="false">
        <fileset dir="${test.src.dir}/">
        </fileset>
      </copy>
      
      <!-- Testfälle für Freischaltcode -->
      <antcall target="runtest">
        <param name="test.group" value="dfc0"/>
      </antcall>
      
      <!-- Testfälle für Abrechnung -->
      <antcall target="runtest">
        <param name="test.group" value="dre0"/>
      </antcall>
      
      <!-- Testfälle für Kassenverzeichnis -->
      <antcall target="runtest">
        <param name="test.group" value="dvz0"/>
      </antcall>
    </target>
    
    <target name="runtest" depends="build">
        <property name="test.group.dir" value="${test.integration.dir}/${test.group}"/>
        <echo>Verarbeite Test Cases in Verzeichnis: ${test.group.dir}</echo>
        <apply executable="java" failonerror="true" parallel="true">
            <!-- Aktuelle Validator Version nutzt eine JAXB Version, die Probleme mit Java 11 hat.
              Optimierung wird für Tests vorerst abgeschaltet. Siehe: https://github.com/javaee/jaxb-v2/issues/1197-->
            <!--<arg value="-Dcom.sun.xml.bind.v2.bytecode.ClassTailor.noOptimize"/>-->
            <arg value="-jar"/>
            <arg value="${lib.dir}/${validator.jar}"/>
            <arg value="-h"/>
            <arg value="-X" />
            <arg value="-s"/>
            <arg file="${config.dir}/scenarios.xml"/>
            <arg value="-r" />
            <arg value="${config.dir}" />
            <arg value="--check-assertions" />
            <arg value="${test.group.dir}/${test.assertions.filename}" />
            <arg value="-o"/>
            <arg value="${test.group.dir}/report/" />
            <fileset dir="${test.group.dir}" includes="**/*.xml">
                <exclude name="**/report/**"/>
                <exclude name="${test.assertions.filename}"/>
            </fileset>
        </apply>
    </target>

    <target name="build">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${config.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <parallel threadcount="3">
            <get dest="${lib.dir}" httpusecaches="true" skipexisting="true"
                 src="https://repo1.maven.org/maven2/net/sf/saxon/Saxon-HE/${saxon.version}/Saxon-HE-${saxon.version}.jar"/>
            <sequential>
                <get dest="${lib.dir}" httpusecaches="true" skipexisting="true"
                     src="https://github.com/schxslt/schxslt/releases/download/v${schxslt.version}/schxslt-${schxslt.version}-xslt-only.zip"/>
                <unzip dest="${lib.dir}/schxslt" overwrite="false" src="${lib.dir}/schxslt-${schxslt.version}-xslt-only.zip">
                    <cutdirsmapper dirs="1"/>
                    <patternset>
                        <exclude name="*/1.0/"/>
                    </patternset>
                </unzip>
            </sequential>
            <sequential>
                <get dest="${lib.dir}" httpusecaches="true" skipexisting="true"
                     src="https://github.com/itplr-kosit/validator/releases/download/v${validator.version}/validator-${validator.version}-distribution.zip"/>
                <unzip dest="${lib.dir}" overwrite="false" src="${lib.dir}/validator-${validator.version}-distribution.zip">
                    <patternset>
                        <include name="*-standalone.jar"/>
                    </patternset>
                </unzip>
            </sequential>
            <sequential>
                <get dest="${lib.dir}" httpusecaches="true" skipexisting="true"
                     src="${xrechnung.download.url}/release-2020-12-31/validator-configuration-xrechnung_2.0.1_2020-12-31.zip "/>
                <unzip dest="${lib.dir}/xrechnung_2.0.1" overwrite="false"
                       src="${lib.dir}/validator-configuration-xrechnung_2.0.1_2020-12-31.zip">
                    <patternset>
                        <include name="resources/"/>
                        <include name="scenarios.xml"/>
                    </patternset>
                </unzip>
            </sequential>
            <sequential>
                <get dest="${lib.dir}" httpusecaches="true" skipexisting="true"
                     src="${xrechnung.download.url}/release-2022-11-15/validator-configuration-xrechnung_2.2.0_2022-11-15.zip "/>
                <unzip dest="${lib.dir}/xrechnung_2.2.0" overwrite="false"
                       src="${lib.dir}/validator-configuration-xrechnung_2.2.0_2022-11-15.zip">
                    <patternset>
                        <include name="resources/"/>
                        <include name="scenarios.xml"/>
                    </patternset>
                </unzip>
            </sequential>
        </parallel>
        <parallel>
            <xslt basedir="src/main/schematron" classpath="${lib.dir}/Saxon-HE-${saxon.version}.jar"
                  destdir="${config.dir}/schematron" extension=".xsl"
                  style="${lib.dir}/schxslt/2.0/pipeline-for-svrl.xsl"/>
            
            <sequential>
                <copy todir="${config.dir}">
                    <fileset dir="src/main/resources"/>
                    <file file="LICENSE"/>
                    <file file="README.en.md"/>
                    <file file="README.md"/>
                </copy>
                <copy todir="${config.dir}/docs">
                    <fileset dir="docs"/>
                </copy>
                <copy todir="${config.dir}/xml-schema/">
                    <fileset dir="${lib.dir}/xrechnung_2.0.1/resources/">
                        <include name="**/cii/**" />
                        <include name="**/xrechnung/**/*CII*" />
                    </fileset>
                    <fileset dir="${lib.dir}/xrechnung_2.2.0/resources/">
                        <include name="**/cii/**" />
                        <include name="**/xrechnung/**/*CII*" />
                    </fileset>
                </copy>
                
                <!-- Temporary workaround for EN16931 Schematron -->
                <xslt in="${config.dir}/xml-schema/cii/16b/xsl/EN16931-CII-validation.xsl"
                      out="${config.dir}/xml-schema/cii/16b/xsl/EN16931-CII-validation-diga.xsl"
                      classpath="${lib.dir}/Saxon-HE-${saxon.version}.jar"
                      style="src/main/patch/EN16931_DiGA_workaround.xslt"
                      extension=".xsl"/>
                <delete file="${config.dir}/xml-schema/cii/16b/xsl/EN16931-CII-validation.xsl"/>
            </sequential>
        </parallel>
        <zip basedir="${config.dir}" destfile="${config.dir}.zip" filesonly="true"/>
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <target name="lib-clean" depends="clean">
        <delete dir="${lib.dir}"/>
    </target>
</project>
